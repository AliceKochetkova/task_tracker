networks:
  docker.network:
    driver: bridge

services:
  php:
    container_name: php
    build: ../task_tracker/docker/php/
    depends_on:
      - db
    networks:
      - docker.network
    volumes:
      - ./:/application

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    depends_on:
      - php
    ports:
      - "80:80"
    networks:
      - docker.network
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./public:/application/public

  db:
    container_name: postgres
    image: postgres:15.1-alpine3.17
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - docker.network
    volumes:
      - db-data:/var/lib/postgresql/data

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  db-data: { }

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
